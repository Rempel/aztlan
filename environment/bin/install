#!/bin/bash

# Install and configure the website in the public directory
set -xe

# Read and import dotenv variables to script
dotenv () {
  DOTENV_SHELL_LOADER_SAVED_OPTS=$(set +o)
  set -o allexport
  [ -f $1 ] && source $1
  set +o allexport
  eval "$DOTENV_SHELL_LOADER_SAVED_OPTS"
  unset DOTENV_SHELL_LOADER_SAVED_OPTS
}

# Go to project root
cd $( dirname $0 )/../..

# General variables
ENVIRONMENT_DIR=environment
PROJECT=$(basename $(pwd))
OS=$(uname -s)

# Docker Compose base command
#
# It must be executed before load environment variables because can be used for
# them.
if [ $( command -v docker-compose ) ]; then
	COMPOSE="VOLUME_PREFIX=${PROJECT}_ docker-compose -p ${PROJECT} -f ${ENVIRONMENT_DIR}/docker-compose.yml"
	if [ 'Darwin' = ${OS} ]; then
		COMPOSE+="-f ${ENVIRONMENT_DIR}/docker-compose.mac.yml"
	fi
fi

# Load project environment variables
dotenv ${ENVIRONMENT_DIR}/env/app.env
dotenv ${ENVIRONMENT_DIR}/env/install.env

# Xdebug
XDEBUG_DATA_DIR=${ENVIRONMENT_DIR}/xdebug
XDEBUG_PROFILER_DIR=${XDEBUG_DATA_DIR}/profiler
XDEBUG_TRACE_DIR=${XDEBUG_DATA_DIR}/trace

# WP core directory
WP_ROOT=public/wp

# WP packages public directory
PUBLIC_PACKAGES_DIR=public/packages
UPLOADS_DIR=${PUBLIC_PACKAGES_DIR}/uploads
THEMES_DIR=${PUBLIC_PACKAGES_DIR}/themes
PLUGINS_DIR=${PUBLIC_PACKAGES_DIR}/plugins
UPGRADE_DIR=${PUBLIC_PACKAGES_DIR}/upgrade
MU_PLUGIN_DIR=${PUBLIC_PACKAGES_DIR}/mu-plugins
LANGUAGES_DIR=${PUBLIC_PACKAGES_DIR}/languages
THEME_LANGUAGES_DIR=${LANGUAGES_DIR}/themes
PLUGINS_LANGUAGES_DIR=${LANGUAGES_DIR}/plugins

# Local WP packages data
PACKAGES_DIR=wp-packages
PACKAGES_LANGUAGES_DIR=${PACKAGES_DIR}/languages
PACKAGES_THEME_LANGUAGES_DIR=${PACKAGES_LANGUAGES_DIR}/themes
PACKAGES_PLUGINS_LANGUAGES_DIR=${PACKAGES_LANGUAGES_DIR}/plugins
PRIVATE_PACKAGES_DIR=${PACKAGES_DIR}/private
PRIVATE_PLUGINS_PACKAGES=${PRIVATE_PACKAGES_DIR}/plugins/*.zip
PRIVATE_THEMES_PACKAGES=${PRIVATE_PACKAGES_DIR}/themes/*.zip

# Extra data
START_UPLOADS=${ENVIRONMENT_DIR}/extra/uploads

# Writable dirs
WWW_DATA_DIRS=(
	${XDEBUG_PROFILER_DIR}
	${XDEBUG_TRACE_DIR}
	${UPLOADS_DIR}
	${THEMES_DIR}
	${LANGUAGES_DIR}
	${UPGRADE_DIR}
	${PLUGINS_DIR}
	${THEME_LANGUAGES_DIR}
	${PLUGINS_LANGUAGES_DIR}
)

# Cria diretórios via Docker por questões de permissão
mkdir -p ${WWW_DATA_DIRS[@]}

# Altera usuário de uploads para www-data da imagem WP-CLI no Linux
if [ 'Darwin' != ${OS} -a ${SET_PERMISSIONS} = "true" ]; then
    WWW_DATA_OWNER=$( eval "${WP_BASH} -c 'echo \$(id -u):\$(id -g)' | tr -d '\r'")
    sudo chown ${WWW_DATA_OWNER} ${WWW_DATA_DIRS[@]} && sudo setfacl -R -m u:`whoami`:rwx . && sudo setfacl -Rd -m u:`whoami`:rwx ${WWW_DATA_DIRS[@]}
fi

# Create symlink for `mu-plugins` directory if it dosen't exists
[ -d ${MU_PLUGIN_DIR} ] || ln -fs ../../wp-packages/mu-plugins ${MU_PLUGIN_DIR}

# Install themes languages
ls -1 ${PACKAGES_THEME_LANGUAGES_DIR} | xargs -I % ln -sf ../../../../${PACKAGES_THEME_LANGUAGES_DIR}/% ${THEME_LANGUAGES_DIR}/

# Install plugins languages
ls -1 ${PACKAGES_PLUGINS_LANGUAGES_DIR} | xargs -I % ln -sf ../../../../${PACKAGES_PLUGINS_LANGUAGES_DIR}/% ${PLUGINS_LANGUAGES_DIR}/

# Update Docker Compose images if command exists
[ -z ${COMPOSE+x} ] || bash -c "${COMPOSE} pull && ${COMPOSE} build --pull"

# Composer
bash -c "${CLI_COMPOSER} install"
bash -c "${INC_COMPOSER} install"
bash -c "${WP_COMPOSER} install"

# NPM
bash -c "${NPM} install"
bash -c "${NPM} run build"

# Get the version installed of the core to be used for download its language
# package
CORE_VERSION=$(eval "${WP_BASH} -c 'wp --path=${WP_ROOT} core version'")

set +x

eval $( echo ${WP_BASH} -c "\"
    set -x;

    [ -e ${START_UPLOADS} -a ${COPY_START_UPLOADS} = "true" ] && cp -r ${START_UPLOADS} ${PUBLIC_PACKAGES_DIR};

    # Install WordPress if not installed
    wp --path=${WP_ROOT} core is-installed &> /dev/null || bash -c '
        # Download the WordPress with the version set on composer.json to get the core language package
        wp --path=${WP_ROOT} core download --version=${CORE_VERSION} --locale=${WP_LANG} --skip-content --force;
		wp --path=${WP_ROOT} db create || wp --path=${WP_ROOT} db reset --yes 2> /dev/null;
        wp --path=${WP_ROOT} core install --url="${WP_HOME}" --title="${WP_TITLE}" --admin_user="${WP_USER}" --admin_password="${WP_PASSWORD}" --admin_email="${WP_EMAIL}" --skip-email
    ';

    # Install extra plugins
    ls -1 ${PRIVATE_PLUGINS_PACKAGES} | xargs -I % wp --path=${WP_ROOT} plugin install % --force;

    # Install extra themes
    ls -1 ${PRIVATE_THEMES_PACKAGES} | xargs -I % wp --path=${WP_ROOT} theme install % --force;


	# Reset themes options for update the release path on deploy
	wp --path=${WP_ROOT} option update template '';
	wp --path=${WP_ROOT} option update stylesheet '';

	# Activate theme
	wp --path=${WP_ROOT} theme activate ${THEME_ACTIVE};

    # Activate all plugins
    wp --path=${WP_ROOT} plugin activate --all;

    # Install or update core language package
    wp --path=${WP_ROOT} language core is-installed ${WP_LANG} &&
        wp --path=${WP_ROOT} language core update ||
        wp --path=${WP_ROOT} language core install ${WP_LANG} --activate;

    # Install or update public plugins language packages
    wp --path=${WP_ROOT} language plugin list --all --language=${WP_LANG} --field=plugin \| xargs -n1 -I % bash -c '
        wp --path=${WP_ROOT} language plugin is-installed % ${WP_LANG} &&
            wp --path=${WP_ROOT} language plugin update % ${WP_LANG} ||
            wp --path=${WP_ROOT} language plugin install % ${WP_LANG}
    ';

    # Install or update public themes language packages
    wp --path=${WP_ROOT} language theme list --all --language=${WP_LANG} --field=plugin \| xargs -n1 -I % bash -c '
        wp --path=${WP_ROOT} language theme is-installed % ${WP_LANG} &&
            wp --path=${WP_ROOT} language theme update % ${WP_LANG} ||
            wp --path=${WP_ROOT} language theme install % ${WP_LANG}
    ';
\"" | sed -e 's/#.*$//' ) # `sed` removes the comments to run the commands on eval
